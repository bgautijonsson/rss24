---
title: "Gaussian Copulas for Large Spatial Fields"
subtitle: "Modeling Data-Level Spatial Dependence in Multivariate Generalized Extreme Value Distributions"
author: "Brynjólfur Gauti Guðrúnar Jónsson"
institute: "University of Iceland"
format: 
  beamer: 
    aspectratio: 169
---
```{r setup}
library(stdmatern)
library(INLA)
library(gt)
library(tidyverse)
options(width = 648)
```

## Introduction
::: {.columns}

::: {.column width="70%"}
- UKCP Local Projections on a 5km grid over the UK (1980-2080)
- Challenge: Modeling maximum daily precipitation in yearly blocks
  - 43,920 spatial locations on a 180 x 244 grid
- Two aspects of spatial dependence:
  1. GEV parameters (ICAR models)
  2. Data-level dependence (Copulas)
:::

::: {.column width="30%"}
![](images/ukcp_data.png){width="100%"}
:::

:::

## Calculating Multivariate Normal Densities

::: {.columns}

::: {.column width="50%"}
### Log Density Formula

$$
\log f(\mathbf{x}) \propto \frac{1}{2}\left(\log |\mathbf{Q}| - \mathbf{x}^T\mathbf{Q}\mathbf{x}\right)
$$

### Key Components

1. **Log Determinant**: $\log |\mathbf{Q}|$
   - Constant for a given precision matrix
2. **Quadratic Form**: $\mathbf{x}^T\mathbf{Q}\mathbf{x}$
   - Needs calculation for each density evaluation
:::

::: {.column width="50%"}
### Computational Challenges

- Log determinant calculation
  - Time complexity: $O(n^3)$ for naive methods
  - Memory complexity: $O(n^2)$
- Quadratic form calculation
  - Time complexity: $O(n^2)$
  - Critical for performance in large spatial fields

### Spatial Model Considerations

- Some models (e.g., ICAR) avoid log determinant calculation
- Efficient computation crucial for large-scale applications
:::

:::

## Spatial Models

### Conditional Autoregression (CAR)
::: {.columns}
::: {.column width="50%"}

* $\mathbf{D}$ is a diagonal matrix with $D_{ii} = n_i$, the number of neighbours of $i$
* $\mathbf{A}$ is the adjacency matrix with $A_{ij} = A_{ji} = 1$ if $i \sim j$
* $\tau$ models overall precision

:::
::: {.column width="50%"}
$$
\begin{aligned}
\mathbf{x} &\sim N(\mathbf{0}, \tau \mathbf{Q}) \\
\mathbf{Q} &= \mathbf{D}\left(\mathbf{I} - \alpha \mathbf{A} \right)
\end{aligned}
$$
:::
::: 


### Besag's Intrinsic Conditional Autoregression (ICAR)
::: {.columns}
::: {.column width="50%"}

* $\alpha = 1$, so $\mathbf Q$ is singular, but constant
* Don't have to calculate $\log |\mathbf{Q}|$
* $\tau$ is a precision parameter
:::
::: {.column width="50%"}
$$
\begin{aligned}
\mathbf{x} &\sim N(\mathbf{0}, \tau \mathbf{Q}) \\
\mathbf{Q} &= \mathbf{D} - \mathbf{W}
\end{aligned}
$$
:::
:::

## Spatial Models

### BYM (Besag-York-Mollié) Model
::: {.columns}
::: {.column width="50%"}

* $\mathbf{u}$ is the structured spatial component (Besag model)
* $\mathbf{v}$ is the unstructured component (i.i.d. normal)
* $\tau_u$ and $\tau_v$ are precision parameters for each component
:::
::: {.column width="50%"}
$$
\begin{aligned}
\mathbf{x} &= \mathbf{u} + \mathbf{v} \\
\mathbf{u} &\sim \mathrm{ICAR}(\tau_u) \\
\mathbf{v} &\sim N(\mathbf{0}, \tau_v^{-1})
\end{aligned}
$$
:::
:::

### BYM2  Model
::: {.columns}
::: {.column width="50%"}

* Rewrite the combination to get proper scaling
* $\rho$ models how much of variance is spatial
* $s$ is a scaling factor chosen to make $\mathrm{Var}(\mathbf u_i) \approx 1$
:::
::: {.column width="50%"}
$$
\begin{aligned}
\mathbf{x} &= \left(\left(\sqrt{\rho/s}\right)\mathbf{u} + \left(\sqrt{1 - \rho}\right) \mathbf{v} \right)\sigma \\
\mathbf{u} &\sim \mathrm{ICAR}(1) \\
\mathbf{v} &\sim N(\mathbf{0}, n)
\end{aligned}
$$
:::
:::

## Spatial Modeling on Parameter-level

::: {.columns}

::: {.column width="50%"}

-  $\mu = \mu_0 \left(1 + \Delta \left(t - t_0\right)\right)$, location
- $\sigma$: scale
- $\xi$: shape
$$
\small{
\begin{aligned}
\log(\mu_0) = \psi &\sim \mathrm{BYM2}(\mu_\psi, \rho_\psi, \sigma_\psi) \\
\log(\mu_0) - \log(\sigma) = \tau &\sim \mathrm{BYM2}(\mu_\tau, \rho_\tau, \sigma_\tau) \\
f_\xi(\xi) = \phi &\sim \mathrm{BYM2}(\mu_\phi, \rho_\phi, \sigma_\phi) \\
f_\Delta(\Delta) = \gamma &\sim \mathrm{BYM2}(\mu_\gamma, \rho_\gamma, \sigma_\gamma)
\end{aligned}
}
$$

![](images/bym_table.png)

:::

::: {.column width="50%"}
![](images/facet_constrained.png)
:::

:::

## From Parameter-level to Data-level Dependence

::: {.columns}

::: {.column width="50%"}
### Parameter-level Dependence
- Assumes conditional independence
- Biased joint probability estimates
- Underestimates parameter variance
:::

::: {.column width="50%"}
### Copula
- Improves joint probabilities
- Enhances spatial risk assessment
- Better variance estimates
:::

:::

::: {style="font-size:65%; margin-top:20px;"}
**Sklar's Theorem**: For any multivariate distribution $H$, there exists a unique copula $C$ such that:

$$
H(\mathbf x) = C(F_1(x_1), \dots, F_d(x_d))
$$

where $F_i$ are marginal distributions. We can also write this as a log-density

$$
\log h(x) = \log c(F_1(x_1), \dots, F_d(x_d)) \sum_{i=1}^d \log f_i(x_i)
$$

:::

## Our Approach: Matérn-like Gaussian Copula

### Marginal CDFs, $F_i(x_i)$, is $\mathrm{GEV}(\mu_i, \sigma_i, \xi_i)$
$$
\begin{aligned}
\log h(\mathbf x) &= \log c(u_1, \dots, u_d) + \sum_{i=1}^d f_{\mathrm{GEV}}(x_i \vert \mu_i, \sigma_i, \xi_i) \\
u_i &= F_{\mathrm{GEV}}(x_i \vert \mu_i, \sigma_i, \xi_i)
\end{aligned}
$$

### Gaussian Copula

$$
\begin{aligned}
\log c(\mathbf u) &\propto \frac{1}{2}\left(\log |\mathbf{Q}| - \mathbf{z}^T\mathbf{Q}\mathbf{z} + \mathbf{z}^T\mathbf{z}\right) \\
\mathbf{z} &= \Phi^{-1}(\mathbf u)
\end{aligned}
$$


## The Precision Matrix

$\mathbf Q$ defined as Kronecker sum of two AR(1) precision matrices

$$
\mathbf{Q} = \left( \mathbf{Q}_{\rho_1} \otimes \mathbf{I_{n_2}} + \mathbf{I_{n_1}} \otimes \mathbf{Q}_{\rho_2} \right)^{\nu + 1}, \quad \nu \in \{0, 1, 2\}
$$

$$
\mathbf{Q}_{\rho} = \frac{1}{1-\rho^2}
\begin{bmatrix}
1 & -\rho & 0 & \cdots & 0 \\
-\rho & 1+\rho^2 & -\rho & \cdots & 0 \\
0 & -\rho & 1+\rho^2 & \cdots & 0 \\
\vdots & \vdots & \vdots & \ddots & \vdots \\
0 & 0 & 0 & \cdots & 1
\end{bmatrix}
$$


## Eigendecomposition


Because of how $\mathbf{Q}$ is defined, we know that

$$
\begin{aligned}
\mathbf{Q} &= \mathbf{V}\boldsymbol{\Lambda}\mathbf{V} \\
&= (\mathbf{V_{\rho_1}} \otimes \mathbf{V_{\rho_2}})(\boldsymbol \Lambda_{\rho_1} \otimes \mathbf{I} + \mathbf{I} \otimes \boldsymbol \Lambda_{\rho_2})^{\nu + 1}(\mathbf{V_{\rho_1}} \otimes \mathbf{V_{\rho_2}})^T \\
\mathbf{Q}_{\rho_1} &= \mathbf{V_{\rho_1}}\boldsymbol \Lambda_{\rho_1}\mathbf{V_{\rho_1}}^T \qquad \& \qquad
\mathbf{Q}_{\rho_2} = \mathbf{V_{\rho_2}}\boldsymbol \Lambda_{\rho_2}\mathbf{V_{\rho_2}}^T
\end{aligned}
$$

Spectral decomposition defined by value/vector pairs of smaller matrices

:::: {.columns}
::: {.column width="50%"}
$$
\left\{\lambda_{\rho_1}\right\}_i + \left\{\lambda_{\rho_2}\right\}_j
$$
:::

::: {.column widht="50%"}
$$
\left\{\mathbf{v}_{\rho_1}\right\}_i \otimes \left\{\mathbf{v}_{\rho_2}\right\}_j
$$
:::
::::

* Problem: $\boldsymbol \Sigma_{ii} = \left(\mathbf Q^{-1} \right)_{ii} \neq  1$
* Solution: $\mathbf{\widetilde  Q} = \mathbf{D}\mathbf{Q}\mathbf{D}$, where $\mathbf D_{ii} = \sqrt{\boldsymbol \Sigma_{ii}}$

## Marginal Standard Deviations

$$
\boldsymbol \Sigma = \mathbf Q^{-1} = (\mathbf{V}\boldsymbol\Lambda\mathbf{V}^T)^{-1} = \mathbf{V}\boldsymbol \Lambda^{-1}\mathbf{V}
$$

We know that if $A = BC$ then $A_{ii} = B_{i, .} C_{., i}$, so

$$
\boldsymbol \Sigma_{ii} = \sum_{k=1}^{n} v_{ik} \frac{1}{\lambda_k} (v^T)_{ki} = \sum_{k=1}^{n} v_{ik} \frac{1}{\lambda_k} v_{ik} = \sum_{k=1}^{n} v_{ik}^2 \frac{1}{\lambda_k}
$$

Compute vector $\sigma^2$ containing all marginal variances

$$ 
\sigma^2 = \sum_{i = 1}^{n_1} \sum_{j=1}^{n_2} \frac{\left(\left\{\mathbf{v}_{\rho_1}\right\}_i \otimes \left\{\mathbf{v}_{\rho_2}\right\}_j\right)^{2}}{\quad\left(\left\{\lambda_{\rho_1}\right\}_i + \left\{\lambda_{\rho_2}\right\}_j\right)^{\nu+1}}
$$

## Marginal Standard Deviations

:::: {.columns}
::: {.column width="58%"}
\AddToHookNext{env/Highlighting/begin}{\tiny}
```{r}
#| echo: true
dim1 <- 50; dim2 <- 50
rho1 <- 0.5; rho2 <- 0.3
nu <- 2
Q1 <- make_AR_prec_matrix(dim1, rho1)
Q2 <- make_AR_prec_matrix(dim2, rho2)
I1 <- Matrix::Diagonal(dim1)
I2 <- Matrix::Diagonal(dim2)
Q <- temp <- kronecker(Q1, I2) + kronecker(I1, Q2)
for (i in seq_len(nu)) Q <- Q %*% temp
```
:::

::: {.column width="42%"}
\AddToHookNext{env/Highlighting/begin}{\tiny}
```{r}
#| echo: true
msd <- function(Q1, Q2) {
  E1 <- eigen(Q1)
  E2 <- eigen(Q2)
  marginal_sd_eigen(
    E1$values, E1$vectors, dim1,
    E2$values, E2$vectors, dim2,
    nu
  ) |> sort()
}
```
:::
:::: 

\AddToHookNext{env/Highlighting/begin}{\tiny}
```{r}
#| echo: true
#| cache: true
#| out-width: 50%
bench::mark(
  "solve" = solve(Q) |> diag() |> sqrt() |> sort(),
  "inla.qinv" = inla.qinv(Q) |> diag() |> sqrt() |> sort(),
  "marginal_sd_eigen" = msd(Q1, Q2),
  iterations = 10, filter_gc = FALSE
)
```
